#!/usr/bin/env bash

function ros_master()
{
  # this is for the wifi dongle
  #export ROS_MASTER_URI=http://$(/sbin/ip -o -4 addr list wlxc46e1f100439 | awk '{print $4}' | cut -d/ -f1):11311
  #this is when plugged into router
  export ROS_MASTER_URI=http://$(/sbin/ip -o -4 addr list enp0s31f6 | awk '{print $4}' | cut -d/ -f1):11311
  #export ROS_MASTER_URI=http://$(hostname -I):11311
  export ROS_IP=$(hostname -I)

  env | grep ROS_MASTER_URI
  env | grep ROS_IP
}

#function clion(){
  #this is a super hacky way to get this to work. for some reason clion is only playing nice if
  #launched from bash. so i switch to bash and the .bashrc file just launces clion because I never
  #use bash for anything else
  #bash
#}

function ssh_up()
{
  ssh up@10.45.10.72
}


function ros_up() 
{
    export ROS_MASTER_URI=http://10.45.10.72:11311
    export ROS_IP=$(hostname -I)

    env | grep ROS_MASTER_URI
    env | grep ROS_IP
}

function ros_local() 
{
    export ROS_MASTER_URI=http://localhost:11311
    export ROS_IP=$(hostname -I)

    env | grep ROS_MASTER_URI
    env | grep ROS_IP
}

function apm_sim()
{
  cd ~/workspaces/dronehunter-dev/src/production/ardupilot-fortem/ArduCopter
  ./start_apm_sim.sh
}

function dgc()
{
  cd ~/workspaces/dronehunter-dev/src/production/ground-station/target
  ./DGC-*.war
}

function viz_dgc()
{
  google-chrome http://localhost:8083/gc    
}

function run_dh_sim()
{
  terminator -l dh_sim
}

function local_ports()
{
  cd ~/workspaces/anansi_dev_tools/tools
  ./virtual_ports.sh -l
}

function qgc()
{
  cd ~/software/
  ./QGroundControl.AppImage
}

function anansi_start()
{
  cd ~/workspaces/dronehunter-dev/anansi_ros
  rosrun anansi_start anansi_start.sh
}

function run_full_sim()
{
  cd ~/workspaces/dronehunter-dev
  bash run_full_sim.sh
}

function qt()
{
  /opt/Qt/Tools/QtCreator/bin/qtcreator 
}

function qtsh()
{
  /opt/Qt/Tools/QtCreator/bin/qtcreator.sh 
}

function vzshrc()
{
  vim ~/.zshrc
}

function szshrc()
{
  source ~/.zshrc
}

function sl()
{
  ls
}

function find_word()
{
  grep -rnw '.' -e "$1"
}

function gmail()
{
  /opt/google/chrome/google-chrome --profile-directory=Default --app-id=pjkljhegncpnkpknbcohdijeoejaedia &
}

function calendar()
{
  /opt/google/chrome/google-chrome --profile-directory=Default --app-id=kjbdgfilnfhdoflbpgamdcdgpehopbep &
}

function vpn()
{
  echo "s: 63.78.118.202:4433"
  echo "u: jacob.olson"
  echo "!UAw3x6#" | xclip -selection c
  echo "p: copied to clipboard. Delete the last character"
  echo "d: Fortem"
  netExtenderGui
}

function detar(){
  tar -xvzf "$1"
  rm "$1"
  cd $(echo "$1"| cut -d'.' -f 1)
}

function retar(){
  tar -cvzf "$1.tgz" "$1"
}

function fix_rosbag(){
  new_bag=$(echo "$1"| cut -d'.' -f 1)".bag"
  echo "Moving $1 -> $new_bag"
  mv $1 $new_bag 
  echo "Reindexing bag: $new_bag..."
  rosbag reindex "$new_bag"
  #echo "Fixing bag..."
  #rosbag fix "$1" $(echo "$1"| cut -d'.' -f 1)".bag"
  echo "Removing currupt bag files..."
  #rm "$1"
  rm $(echo "$1"| cut -d'.' -f 1)".orig.bag"
}

function print_this(){
  echo $(echo "$1"| cut -d'.' -f 1)".bag"
}

function tracker(){
  sudo bash /opt/tracker/tracker.sh
}

function profile(){
  python3 -m cProfile -o $2 $1
}

function printProf(){
  echo $2 $1
}

extract-all () 
{ 
  NO_FLIGHT_DIR="noFlight";
  if [[ -d "${NO_FLIGHT_DIR}" ]]; then
      echo "grabbing ${NO_FLIGHT_DIR} logs";
      mv -v "${NO_FLIGHT_DIR}"/* .;
      rm -rv "${NO_FLIGHT_DIR}";
  fi;
  echo "current dir: $(pwd)";
  mkdir -p archive;
  for x in *.tgz;
  do
      echo "  $x" && tar -xzf $x && mv $x archive;
  done;
  echo ",extract-all done!";
  ls --color=auto
}

function dh_sim(){
  tmux new-session \; split-window -v \; split-window -h \; send -t 0:1.1 "dgc" C-m \; send -t 0:1.2 "anansi_start" C-m \; send -t 0:1.3 "apm_sim" C-m \; attach 
}

function dh_full_sim(){
  tmux new-session \; split-window -v \; split-window -h \; new-window \; split-window -v \; split-window -h \; send -t 0:1.1 "dgc" C-m \; send -t 0:1.2 "anansi_start" C-m \; send -t 0:1.3 "apm_sim" C-m \; send -t 0:2.1 "rosrun sim_interfaces target_interface" C-m \; send -t 0:2.2 "bash ~/workspaces/dronehunter-dev/visualizer/scripts/run.sh" C-m \; send -t 0:2.3 "bash ~/workspaces/dronehunter-dev/radar-sim/scripts/run.sh air" C-m \; attach 
  
}

function github_token_to_clipboard(){
  echo "TODO-copy-token" | xclip -selection c
  echo "Expires ??"
}

alias setclip="xclip -selection c"
alias getclip="xclip -selection c -o"

function gitlab_token_to_clipboard(){
  echo "TODO-copy-token" | xclip -selection c
  echo "Copied to clipboard. Token expires: 11-06-2024"
}

function rkill(){
  rosrun anansi_start kill_all.sh
}

alias pr='python3 ~/workspaces/dronehunter-dev/tools/analysis-tools/executables/plot_rosbag'
alias prl='cd ~/ros_logs/latest && pr'
alias pts='python3 ~/workspaces/dronehunter-dev/tools/analysis-tools/executables/dh_plot_states'
alias dhviz='python3 ~/workspaces/dronehunter-dev/tools/analysis-tools/executables/dh_viz'
alias netviz='python3 ~/workspaces/dronehunter-dev/tools/analysis-tools/executables/dh_net_viz'
alias logwiz='python3 ~/workspaces/dronehunter-dev/tools/anansi_dev_tools/tools/log_wizard/log_wiz_gui.py'
alias plot_apm='python3 ~/workspaces/dronehunter-dev/tools/analysis-tools/apm_analysis_scripts/plot_apm_log.py'
alias plot_dgc='python3 ~/workspaces/dronehunter-dev/tools/analysis-tools/dgc_analysis_scripts/plot_dgc.py'
alias plot_dgc_pre_v6='python3 ~/workspaces/dronehunter-dev/tools/analysis-tools/dgc_analysis_scripts/plot_dgc_pre_v6.py'
alias studio="bash ~/Software/android-studio/bin/studio.sh"
function copyVersionedFile() {
    file_to_copy=${1}
    destination=${2}
    version_line_number=${3}
    file_version_line=$(sed -n ${version_line_number}p ${file_to_copy})
    #first check if file exists
    if test -f "${destination}"; then
        echo "Moving along"
    # file exists so check if it is the same version
        if sudo grep -Fxq ${file_version_line} ${destination}; then
          echo "checking next"
          file_size1=$(ls -l ${file_to_copy} | awk '{print $5}')
          file_size2=$(ls -l ${destination} | awk '{print $5}')
            if [ "$file_size1" = "$file_size2" ]; then
                echo "File ${file_to_copy} is unchanged, not copying"; 
            else 
                echo "Copying ${file_to_copy} to ${destination}. Different size"; 
                cp ${file_to_copy} ${destination}
            fi
        else 
            echo "Copying ${file_to_copy} to ${destination}. Different version"; 
            cp ${file_to_copy} ${destination}
        fi
    else 
        echo "Copying ${file_to_copy} to ${destination}. File doesnt exist"; 
        cp ${file_to_copy} ${destination}
    fi
}

function listDrds(){
  parent_directory=${1}
  drds=$(ls -t ${parent_directory})
  # echo "this is the return ${drds}"

  # readarray -t y <<<"$drds"
  # IFS='\n' read -rd '' -a y array <<< "$drds"
  # IFS=$'\n' read -rd ' ' y <<<"$drds"
  # IFS=$'\n' y=($drds)
  # y=(${drds//$'\n'/ })
  myarray=($drds)
  echo "moving on"
  echo "num elements= ${#myarray[@]}"

  for file in $y
  do
    echo "--> $file"
  done
}

function ssh_() {
  ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${1} ${2}
}

function internal_audio() {
  pactl set-default-sink alsa_output.pci-0000_00_1f.3.analog-stereo
  pactl set-default-source alsa_input.pci-0000_00_1f.3.analog-stereo
  echo "ran it" >> testing.log
}

function show_sizes() {
  ls -t | while IFS= read -r dir; do du -sh "$dir"; done
}

function rezip() {
  unzip -Z -1 $1 | xargs -I{} rm -rv {}
}

function log_scraper() {
  python ~/workspaces/dronehunter-dev/tools/analysis-tools/dh_analysis_scripts/log_scraper/dh_log_scraper.py $1
}

function safe_delete_git_branches() {
  bash ~/.scripts/safe_delete_git_branches.sh
}

function git_branch_hash() {
  hash=$(git rev-parse HEAD)
  branch=$(git branch -a --contains=$hash | grep "remotes" | grep -vwE "(HEAD)")
  echo "$branch"
  if [[ -z "${branch}" ]]; then
    echo $(git branch -a --contains=$hash) 
  fi
}

function copyright_check_main() {
  rosrun tools check_copyrights.py --apply --files $(git diff --diff-filter=AMR --name-only origin/main...HEAD)
}

function copyright_check_dev() {
  rosrun tools check_copyrights.py --apply --files $(git diff --diff-filter=AMR --name-only origin/dev...HEAD)
}

